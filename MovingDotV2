#include <TFT_eSPI.h>

//create the screen variable from the library
TFT_eSPI tft = TFT_eSPI();

// Set up variables for the cursor and counter. Cursor starts in the middle of the screen.
float cursorX = 300.0;
float cursorY = 160.0;
int resetCount = 0;
int32_t radius1 = 5;
int32_t radius2 = 6;
int32_t height = 320;
int32_t x_initial = 400;
int32_t y_initial = 0;

// Setting the joystick pins here so we can easily change them
#define JOYSTICK_X_PIN A7
#define JOYSTICK_Y_PIN A6
#define JOYSTICK_BUTTON_PIN 34

// Define colours in 4-digit hex                                  
#define BLACK 0x0000
#define BLUE 0x001F
#define RED 0xF800
#define GREEN 0x07E0
#define CYAN 0x07FF
#define MAGENTA 0xF81F
#define YELLOW 0xFFE0
#define WHITE 0xFFFF

void setup() {

  // Initalize the screen and set the orientation correctly, then make sure it's clear.
  tft.begin();
  tft.setRotation(1);
  tft.fillScreen(BLACK);

  // Set the cursor to the top left of the screen and print some text.
  tft.setCursor(0, 0);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.println("Hello :)");

  // Tell the arduino that the joystick button is on pin 9 and write it high so it gets set to 0 when pushed.
  // If you'd like to learn more about this check out the Elegoo documentation on the Joystick.
  pinMode(JOYSTICK_BUTTON_PIN, INPUT);
  digitalWrite(JOYSTICK_BUTTON_PIN, HIGH);
}

void loop() {
  // Read input and map change the range from 0 - 1023 to -0.05 to 0.05. map() only creates integers. 
  float JoyStickX = map(analogRead(JOYSTICK_X_PIN), 0, 1023, -1000, 1000)/20000.0;
  float JoyStickY = map(analogRead(JOYSTICK_Y_PIN), 0, 1023, -1000, 1000)/20000.0;

  // Update cursor position
  cursorY = cursorY + JoyStickY;
  cursorX = cursorX + JoyStickX;

  // Limit the cursor to the bounds of the screen
  cursorX = constrain(cursorX, 0,480);
  cursorY = constrain(cursorY, 0,320);

  // If the button has been held for around a second, reset the canvas.
  if (resetCount > 1000) {
    tft.fillScreen(BLACK);

    tft.setCursor(0, 0);
    tft.setTextColor(WHITE);
    tft.setTextSize(2);
    tft.println("Welcome!");

    cursorX = 300.0;
    cursorY = 160.0;
  }

  // finish line
  tft.drawFastVLine(x_initial, y_initial, height, WHITE);
  if (cursorX>=x_initial){
    tft.fillScreen(BLACK);

    tft.setCursor(0, 0);
    tft.setTextColor(WHITE);
    tft.setTextSize(2);
    tft.println("finished! play again!");


    cursorX = 300.0;
    cursorY = 160.0;
  }

  // draw a circle and triangle where the cursor currently is 
  tft.fillCircle(int(cursorX), int(cursorY), radius1, CYAN);


  // update the point's previous location
  float xPrev=cursorX;
	float yPrev=cursorY;

  //If not in same position, cover trail behind to look like a dot
  if(cursorX == xPrev || cursorY == yPrev){
	  tft.drawCircle(int(cursorX), int(cursorY), radius1, BLACK); // set the stroke color to black
    tft.drawCircle(int(cursorX), int(cursorY), radius2, BLACK); // set the stroke color to black
  }
  
}

