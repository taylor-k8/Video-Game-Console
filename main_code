// ===================================================
//               HOMESCREEN
// ===================================================

//https://howtomechatronics.com/tutorials/arduino/arduino-tft-lcd-touch-screen-tutorial/
//https://docs.arduino.cc/retired/getting-started-guides/TFT#write-your-first-program


//========== Libraries ========
//create the screen variable from the library
TFT_eSPI tft = TFT_eSPI();       //rename as tft

// Set up variables for the cursor and counter. Cursor starts at left of the screen. (note middle X = 240.0, middle Y = 160.0)
float cursorX = 0.0;
float cursorY = 160.0;
int resetCount = 0;

// Setting the joystick pins here so we can easily change them
#define JOYSTICK_X_PIN A7
#define JOYSTICK_Y_PIN A6
#define JOYSTICK_BUTTON_PIN 34

// Define colours in 4-digit hex                                  
#define BLACK 0x0000
#define BLUE 0x001F
#define RED 0xF800
#define GREEN 0x07E0
#define CYAN 0x07FF
#define MAGENTA 0xF81F
#define YELLOW 0xFFE0
#define WHITE 0xFFFF

//========== Implementing Text to Arduino ========
void setup() {

  // Put this line at the beginning of every sketch that uses the GLCD: //what is GLCD?
  tft.begin();

  // clear the screen with a black background
  tft.background(BLACK);

  // set the font color to white
  tft.stroke(WHITE);
  
  // set the font size
  tft.setTextSize(2);
  
  // write the text to the top left corner of the screen
  tft.text("PRESS START TO PLAY :\n ", 0, 0);
  
  // set the font size very large for the loop
  tft.setTextSize(5);
  
  // Tell the arduino that the joystick button is on pin 9 and write it high so it gets set to 0 when pushed.
  pinMode(JOYSTICK_BUTTON_PIN, INPUT);
  digitalWrite(JOYSTICK_BUTTON_PIN, HIGH);
}

//========== Text Specifics ========

void loop() {    //What does this do?

  // Read the value of the sensor on A0
  String sensorVal = String(analogRead(A0));

  // convert the reading to a char array
  sensorVal.toCharArray(sensorPrintout, 4);

  // set the font color
  TFTscreen.stroke(255, 255, 255);
  // print the sensor value
  TFTscreen.text(sensorPrintout, 0, 20);
  // wait for a moment
  delay(250);
  // erase the text you just wrote
  TFTscreen.stroke(0, 0, 0);
  TFTscreen.text(sensorPrintout, 0, 20);
}

//I think what we could do for overall game is to make functions for each task, then put them in the main loop (such as having void homescreeen(), void level1())

void levelone(){
  // Read input and map change the range from 0 - 1023 to -0.05 to 0.05. map() only creates integers, so divide by float to get float type 
  float JoyStickX = map(analogRead(JOYSTICK_X_PIN), 0, 1023, -1000, 1000)/20000.0;
  float JoyStickY = map(analogRead(JOYSTICK_Y_PIN), 0, 1023, -1000, 1000)/20000.0;

  // Update cursor position
  cursorY = cursorY + JoyStickY;
  cursorX = cursorX + JoyStickX;

  // Limit the cursor to the bounds of the screen
  cursorX = constrain(cursorX, 0,480);
  cursorY = constrain(cursorY, 0,320);

  // Read the pin for the button in the joystick, and if pressed add one to resetCount. Otherwise, reset it to 0.
  if (digitalRead(JOYSTICK_BUTTON_PIN) == 0){ 
    resetCount += 1;
    }
  else{
    resetCount = 0;
    }

  // If the button has been held for around a second, go to homescreen
  if (resetCount > 1000) {
    //call homescreen function
    setup()
  }

  //If not in same position, cover trail behind to look like a dot
  if(cursorX != xPrev || cursorY != yPrev){
	  tft.stroke(0,0,0); // set the stroke color to black
	  tft.point(xPrev, yPrev); // color in the previous point
  }
  // Finally, draw a circle where the cursor currently is 
  tft.fill(int(cursorX), int(cursorY), MAGENTA);

  // update the point's previous location
  xPrev=cursorX;
	yPrev=cursorY;
